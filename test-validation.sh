#!/bin/bash

# SecureTask Validation Testing Script
# This script tests the comprehensive validation implementation

echo "üîç Starting SecureTask Validation Tests..."
echo "============================================"

BASE_URL="http://localhost:3000"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counter
TOTAL_TESTS=0
PASSED_TESTS=0

# Function to perform test
test_validation() {
    local test_name="$1"
    local endpoint="$2"
    local data="$3"
    local expected_status="$4"
    local expected_content="$5"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    echo -e "\nüìã Testing: ${YELLOW}${test_name}${NC}"
    
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        -X POST \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "$data" \
        "$BASE_URL$endpoint")
    
    status=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    body=$(echo "$response" | sed 's/HTTPSTATUS:[0-9]*$//')
    
    if [[ "$status" == "$expected_status" ]]; then
        if [[ -z "$expected_content" ]] || echo "$body" | grep -q "$expected_content"; then
            echo -e "‚úÖ ${GREEN}PASS${NC} - Status: $status"
            PASSED_TESTS=$((PASSED_TESTS + 1))
        else
            echo -e "‚ùå ${RED}FAIL${NC} - Expected content not found"
            echo "Response: $body"
        fi
    else
        echo -e "‚ùå ${RED}FAIL${NC} - Expected status: $expected_status, Got: $status"
        echo "Response: $body"
    fi
}

echo -e "\nüîê Testing Authentication Validation..."
echo "--------------------------------------"

# Test 1: Valid login
test_validation "Valid Admin Login" "/login" "username=admin&password=Admin123!" "302" ""

# Test 2: Invalid username format
test_validation "Invalid Username (too short)" "/login" "username=ad&password=Admin123!" "302" ""

# Test 3: Invalid username format (special chars)
test_validation "Invalid Username (special chars)" "/login" "username=admin<script>&password=Admin123!" "302" ""

# Test 4: SQL Injection attempt in username
test_validation "SQL Injection in Username" "/login" "username=admin';DROP TABLE users;--&password=Admin123!" "302" ""

# Test 5: XSS attempt in username
test_validation "XSS in Username" "/login" "username=admin<script>alert('xss')</script>&password=Admin123!" "302" ""

# Test 6: Password too short
test_validation "Password Too Short" "/register" "username=testuser&password=short&confirmPassword=short" "302" ""

# Test 7: Password missing requirements
test_validation "Password Missing Requirements" "/register" "username=testuser&password=onlylowercase&confirmPassword=onlylowercase" "302" ""

# Test 8: Password with common patterns
test_validation "Common Password" "/register" "username=testuser&password=password123&confirmPassword=password123" "302" ""

echo -e "\nüìù Testing Task Creation Validation..."
echo "------------------------------------"

# First, we need to login as a project manager
echo "Logging in as manager for task tests..."

# Test 9: Valid task creation (would need session)
# Note: This would require a valid session, so we'll test the validation patterns

# Test 10: Task title too long
test_validation "Task Title Too Long" "/dashboard/create-task" "title=$(printf 'a%.0s' {1..150})&description=Valid description&assignedTo=1&priority=High" "400" ""

# Test 11: Invalid priority
test_validation "Invalid Priority" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=1&priority=InvalidPriority" "400" ""

# Test 12: XSS in task description
test_validation "XSS in Task Description" "/dashboard/create-task" "title=Valid Title&description=<script>alert('xss')</script>&assignedTo=1&priority=High" "400" ""

# Test 13: SQL injection in task title
test_validation "SQL Injection in Task Title" "/dashboard/create-task" "title='; DROP TABLE tasks; --&description=Valid description&assignedTo=1&priority=High" "400" ""

echo -e "\nüî¢ Testing Numeric Validation..."
echo "------------------------------"

# Test 14: Invalid user ID (non-numeric)
test_validation "Non-numeric User ID" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=abc&priority=High" "400" ""

# Test 15: User ID out of range (negative)
test_validation "Negative User ID" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=-1&priority=High" "400" ""

# Test 16: User ID too large
test_validation "User ID Too Large" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=999999999999&priority=High" "400" ""

echo -e "\nüìß Testing Email Validation (Future Features)..."
echo "----------------------------------------------"

# Test 17: Invalid email format
test_validation "Invalid Email Format" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&email=invalid-email" "302" ""

# Test 18: Email too long
test_validation "Email Too Long" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&email=$(printf 'a%.0s' {1..250})@example.com" "302" ""

echo -e "\nüåê Testing URL Validation (Future Features)..."
echo "--------------------------------------------"

# Test 19: Invalid URL format
test_validation "Invalid URL Format" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=1&priority=High&url=not-a-url" "400" ""

# Test 20: Dangerous URL (javascript protocol)
test_validation "Dangerous URL Protocol" "/dashboard/create-task" "title=Valid Title&description=Valid description&assignedTo=1&priority=High&url=javascript:alert('xss')" "400" ""

echo -e "\nüö´ Testing Security Pattern Detection..."
echo "-------------------------------------"

# Test 21: Command injection attempt
test_validation "Command Injection" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&comment=test; rm -rf /" "302" ""

# Test 22: Path traversal attempt
test_validation "Path Traversal" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&file=../../etc/passwd" "302" ""

# Test 23: NoSQL injection attempt
test_validation "NoSQL Injection" "/login" "username=admin&password[\$ne]=null" "400" ""

# Test 24: LDAP injection attempt
test_validation "LDAP Injection" "/register" "username=testuser*)(uid=*))(|(uid=*&password=ValidPass123!&confirmPassword=ValidPass123!" "302" ""

# Test 25: XXE attempt
test_validation "XXE Injection" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&data=<?xml version='1.0'?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root>" "302" ""

echo -e "\nüìä Testing Request Size Limits..."
echo "-------------------------------"

# Test 26: Large request body
large_data=$(printf 'a%.0s' {1..1000000})  # 1MB of data
test_validation "Large Request Body" "/register" "username=testuser&password=ValidPass123!&confirmPassword=ValidPass123!&largedata=$large_data" "400" ""

# Test 27: Too many parameters
many_params=""
for i in {1..150}; do
    many_params="${many_params}param${i}=value${i}&"
done
test_validation "Too Many Parameters" "/register" "${many_params}username=testuser&password=ValidPass123!" "400" ""

echo -e "\nüì± Testing Content-Type Validation..."
echo "-----------------------------------"

# Test 28: Invalid content type
echo "Testing invalid content type..."
response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -X POST \
    -H "Content-Type: text/plain" \
    -d "username=admin&password=Admin123!" \
    "$BASE_URL/login")

status=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
if [[ "$status" == "400" ]]; then
    echo -e "‚úÖ ${GREEN}PASS${NC} - Invalid Content-Type rejected"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "‚ùå ${RED}FAIL${NC} - Invalid Content-Type accepted"
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "\nüîÑ Testing HTTP Method Validation..."
echo "---------------------------------"

# Test 29: Invalid HTTP method
echo "Testing invalid HTTP method..."
response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -X PATCH \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "username=admin&password=Admin123!" \
    "$BASE_URL/login")

status=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
if [[ "$status" == "400" ]]; then
    echo -e "‚úÖ ${GREEN}PASS${NC} - Invalid HTTP method rejected"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "‚ùå ${RED}FAIL${NC} - Invalid HTTP method accepted"
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "\nüìà Test Results Summary"
echo "====================="
echo -e "Total Tests: ${YELLOW}$TOTAL_TESTS${NC}"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$((TOTAL_TESTS - PASSED_TESTS))${NC}"

if [[ $PASSED_TESTS -eq $TOTAL_TESTS ]]; then
    echo -e "\nüéâ ${GREEN}All tests passed! Validation system is working correctly.${NC}"
else
    echo -e "\n‚ö†Ô∏è  ${YELLOW}Some tests failed. Please review the validation implementation.${NC}"
fi

echo -e "\nüìã Validation Features Tested:"
echo "‚Ä¢ Username pattern and length validation"
echo "‚Ä¢ Password strength and complexity requirements"
echo "‚Ä¢ SQL injection prevention"
echo "‚Ä¢ XSS attack prevention"
echo "‚Ä¢ NoSQL injection prevention"
echo "‚Ä¢ Command injection prevention"
echo "‚Ä¢ Path traversal prevention"
echo "‚Ä¢ LDAP injection prevention"
echo "‚Ä¢ XXE injection prevention"
echo "‚Ä¢ Numeric range validation"
echo "‚Ä¢ Email format validation"
echo "‚Ä¢ URL format validation"
echo "‚Ä¢ Request size limits"
echo "‚Ä¢ Parameter count limits"
echo "‚Ä¢ Content-Type validation"
echo "‚Ä¢ HTTP method validation"
echo "‚Ä¢ Error categorization and logging"

echo -e "\n‚úÖ ${GREEN}Validation testing complete!${NC}"
